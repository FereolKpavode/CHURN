"""
Application Streamlit pour la pr√©diction de churn client.

Cette application permet de pr√©dire si un client bancaire est susceptible 
de quitter la banque (churn) en utilisant un mod√®le de machine learning.
"""
import streamlit as st
import logging
from typing import Dict, Any

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Imports des modules locaux
from config.settings import Settings
from config.constants import Gender, Country, Category, BinaryChoice
from data.schemas import CustomerData
from data.validator import DataValidator
from models.predictor import ChurnPredictor
from ui.components import InputComponents, DisplayComponents
from utils.exceptions import ChurnPredictionError


def configure_page():
    """Configure la page Streamlit."""
    st.set_page_config(
        page_title=Settings.APP_TITLE,
        page_icon=Settings.PAGE_ICON,
        layout=Settings.LAYOUT
    )


def render_sidebar():
    """Affiche la barre lat√©rale avec les informations."""
    with st.sidebar:
        st.header("‚ÑπÔ∏è √Ä propos")
        st.write(
            "Cette application utilise un mod√®le Random Forest "
            "pour pr√©dire le risque de churn client."
        )
        
        st.header("üìã Instructions")
        st.write(
            "1. Remplissez tous les champs du formulaire\n"
            "2. Cliquez sur 'Pr√©dire le churn'\n"
            "3. Consultez le r√©sultat et les recommandations"
        )
        
        st.header("üéØ Interpr√©tation")
        st.write("**Probabilit√© de churn :**")
        st.write("‚Ä¢ üü¢ < 30% : Risque faible")
        st.write("‚Ä¢ üü° 30-70% : Risque moyen") 
        st.write("‚Ä¢ üî¥ > 70% : Risque √©lev√©")


def collect_user_inputs() -> Dict[str, Any]:
    """
    Collecte les donn√©es saisies par l'utilisateur.
    
    Returns:
        Dictionnaire contenant toutes les donn√©es saisies
    """
    st.header("üìù Saisie des Donn√©es Client")
    
    # Organisation en colonnes
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üë§ Informations Personnelles")
        
        age = InputComponents.render_numeric_input(
            "√Çge", "age", 
            "√Çge du client en ann√©es"
        )
        
        gender = InputComponents.render_selectbox(
            "Sexe", Gender,
            "Sexe du client"
        )
        
        country = InputComponents.render_selectbox(
            "Pays", Country,
            "Pays de r√©sidence du client"
        )
        
        category = InputComponents.render_selectbox(
            "Cat√©gorie", Category,
            "Cat√©gorie de compte du client"
        )
        
        st.subheader("üè¶ Informations Bancaires")
        
        credit_score = InputComponents.render_numeric_input(
            "Score de Cr√©dit", "credit_score",
            "Score de cr√©dit du client (300-900)"
        )
        
        tenure = InputComponents.render_slider_input(
            "Anciennet√© (ann√©es)", "tenure",
            "Nombre d'ann√©es depuis l'ouverture du compte"
        )
    
    with col2:
        st.subheader("üí∞ Informations Financi√®res")
        
        balance = InputComponents.render_numeric_input(
            "Solde du Compte (‚Ç¨)", "balance",
            "Solde actuel du compte principal"
        )
        
        estimated_salary = InputComponents.render_numeric_input(
            "Salaire Estim√© (‚Ç¨)", "estimated_salary",
            "Salaire annuel estim√© du client"
        )
        
        num_of_products = InputComponents.render_slider_input(
            "Nombre de Produits", "num_of_products",
            "Nombre de produits bancaires utilis√©s"
        )
        
        point_earned = InputComponents.render_numeric_input(
            "Points Gagn√©s", "point_earned",
            "Points de fid√©lit√© accumul√©s"
        )
        
        st.subheader("üîç Comportement Client")
        
        has_credit_card = InputComponents.render_selectbox(
            "Poss√®de une Carte de Cr√©dit", BinaryChoice,
            "Le client poss√®de-t-il une carte de cr√©dit ?"
        )
        
        is_active_member = InputComponents.render_selectbox(
            "Membre Actif", BinaryChoice,
            "Le client est-il un membre actif ?"
        )
        
        complain = InputComponents.render_selectbox(
            "A D√©pos√© une Plainte", BinaryChoice,
            "Le client a-t-il d√©pos√© une plainte r√©cemment ?"
        )
        
        satisfaction_score = InputComponents.render_slider_input(
            "Score de Satisfaction", "satisfaction_score",
            "Score de satisfaction client (0-5)"
        )
    
    return {
        'credit_score': int(credit_score),
        'age': int(age),
        'tenure': int(tenure),
        'balance': float(balance),
        'num_of_products': int(num_of_products),
        'estimated_salary': float(estimated_salary),
        'satisfaction_score': int(satisfaction_score),
        'point_earned': int(point_earned),
        'has_credit_card': has_credit_card,
        'is_active_member': is_active_member,
        'complain': complain,
        'gender': gender,
        'country': country,
        'category': category
    }


def main():
    """Fonction principale de l'application."""
    # Configuration de la page
    configure_page()
    
    # Titre principal
    st.title(Settings.APP_TITLE)
    
    # Barre lat√©rale
    render_sidebar()
    
    try:
        # Initialisation du pr√©dicteur
        predictor = ChurnPredictor()
        
        # Collecte des donn√©es utilisateur
        user_data = collect_user_inputs()
        
        # Bouton de pr√©diction
        if st.button("üéØ Pr√©dire le Churn", type="primary", use_container_width=True):
            with st.spinner("Analyse en cours..."):
                
                # Validation des donn√©es
                validation_errors = DataValidator.validate_customer_data(user_data)
                business_errors = DataValidator.validate_business_rules(user_data)
                all_errors = validation_errors + business_errors
                
                if DisplayComponents.render_error_message(all_errors):
                    st.stop()
                
                # Cr√©ation de l'objet CustomerData
                customer_data = CustomerData(**user_data)
                
                # Affichage du profil client
                DisplayComponents.render_customer_summary(customer_data)
                
                # Pr√©diction
                result = predictor.predict(customer_data)
                
                # Affichage du r√©sultat
                DisplayComponents.render_prediction_result(result, customer_data)
                
                # Log de la pr√©diction
                logger.info(
                    f"Pr√©diction effectu√©e - Client: {customer_data.age}ans, "
                    f"{customer_data.country.value}, R√©sultat: {result.prediction}, "
                    f"Probabilit√©: {result.probability:.3f}"
                )
    
    except ChurnPredictionError as e:
        st.error(f"‚ùå Erreur de pr√©diction : {e}")
        logger.error(f"Erreur de pr√©diction : {e}")
    
    except Exception as e:
        st.error("‚ùå Une erreur inattendue s'est produite. Veuillez contacter l'administrateur.")
        logger.error(f"Erreur inattendue : {e}")


if __name__ == "__main__":
    main()
