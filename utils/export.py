"""
Utilitaires d'export pour l'application de churn.
"""
import streamlit as st
from datetime import datetime
from typing import Optional
import io
import base64

try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.lib.colors import HexColor
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

from data.schemas import CustomerData, PredictionResult
from config.settings import Settings


class PDFExporter:
    """Classe pour exporter les r√©sultats en PDF."""
    
    def __init__(self):
        """Initialise l'exporteur PDF."""
        if not REPORTLAB_AVAILABLE:
            st.warning(
                "‚ö†Ô∏è **Export PDF non disponible**: La biblioth√®que ReportLab n'est pas install√©e. "
                "Ex√©cutez `pip install reportlab` pour activer cette fonctionnalit√©."
            )
    
    def generate_report(self, customer_data: CustomerData, result: PredictionResult) -> Optional[bytes]:
        """
        G√©n√®re un rapport PDF complet.
        
        Args:
            customer_data: Donn√©es du client
            result: R√©sultat de la pr√©diction
            
        Returns:
            Bytes du PDF ou None si erreur
        """
        if not REPORTLAB_AVAILABLE:
            return None
        
        try:
            # Buffer pour le PDF
            buffer = io.BytesIO()
            
            # Configuration du document
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=inch,
                leftMargin=inch,
                topMargin=inch,
                bottomMargin=inch
            )
            
            # Styles
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                spaceAfter=30,
                textColor=HexColor('#1f77b4'),
                alignment=1  # Center
            )
            
            # Contenu du PDF
            story = []
            
            # En-t√™te
            story.append(Paragraph("Rapport d'Analyse de Churn Client", title_style))
            story.append(Spacer(1, 20))
            
            # Date du rapport
            date_str = datetime.now().strftime("%d/%m/%Y √† %H:%M")
            story.append(Paragraph(f"<b>Date du rapport :</b> {date_str}", styles['Normal']))
            story.append(Spacer(1, 20))
            
            # R√©sultat principal
            self._add_main_result(story, result, styles)
            story.append(Spacer(1, 20))
            
            # Profil client
            self._add_customer_profile(story, customer_data, styles)
            story.append(Spacer(1, 20))
            
            # D√©tails de l'analyse
            self._add_analysis_details(story, result, customer_data, styles)
            story.append(Spacer(1, 20))
            
            # Recommandations
            self._add_recommendations(story, result, customer_data, styles)
            
            # Footer
            story.append(Spacer(1, 30))
            story.append(Paragraph(
                "<i>Rapport g√©n√©r√© automatiquement par le syst√®me de pr√©diction de churn</i>",
                styles['Normal']
            ))
            
            # Construction du PDF
            doc.build(story)
            
            # R√©cup√©ration des bytes
            pdf_bytes = buffer.getvalue()
            buffer.close()
            
            return pdf_bytes
            
        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration du PDF : {e}")
            return None
    
    def _add_main_result(self, story, result: PredictionResult, styles):
        """Ajoute le r√©sultat principal au PDF."""
        # Titre de section
        story.append(Paragraph("üéØ R√âSULTAT DE LA PR√âDICTION", styles['Heading2']))
        story.append(Spacer(1, 10))
        
        # R√©sultat en grand
        if result.will_churn:
            risk_text = f"<font color='red'><b>RISQUE DE D√âPART D√âTECT√â</b></font>"
            prob_text = f"Probabilit√© de churn : <b>{result.formatted_probability}</b>"
        else:
            risk_text = f"<font color='green'><b>CLIENT FID√àLE</b></font>"
            prob_text = f"Probabilit√© de churn : <b>{result.formatted_probability}</b>"
        
        story.append(Paragraph(risk_text, styles['Normal']))
        story.append(Paragraph(prob_text, styles['Normal']))
        story.append(Paragraph(f"Niveau de risque : <b>{result.risk_level}</b>", styles['Normal']))
    
    def _add_customer_profile(self, story, customer_data: CustomerData, styles):
        """Ajoute le profil client au PDF."""
        story.append(Paragraph("üë§ PROFIL CLIENT", styles['Heading2']))
        story.append(Spacer(1, 10))
        
        # Tableau des informations client
        data = [
            ['Caract√©ristique', 'Valeur'],
            ['√Çge', f"{customer_data.age} ans"],
            ['Sexe', customer_data.gender.value],
            ['Pays', customer_data.country.value],
            ['Cat√©gorie', customer_data.category.value],
            ['Score de cr√©dit', str(customer_data.credit_score)],
            ['Anciennet√©', f"{customer_data.tenure} ann√©es"],
            ['Solde du compte', f"{customer_data.balance:,.0f} ‚Ç¨"],
            ['Salaire estim√©', f"{customer_data.estimated_salary:,.0f} ‚Ç¨"],
            ['Nombre de produits', str(customer_data.num_of_products)],
            ['Carte de cr√©dit', customer_data.has_credit_card.value],
            ['Membre actif', customer_data.is_active_member.value],
            ['Plainte r√©cente', customer_data.complain.value],
            ['Score satisfaction', f"{customer_data.satisfaction_score}/5"],
            ['Points gagn√©s', f"{customer_data.point_earned:,}"]
        ]
        
        table = Table(data, colWidths=[3*inch, 2*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(table)
    
    def _add_analysis_details(self, story, result: PredictionResult, customer_data: CustomerData, styles):
        """Ajoute les d√©tails de l'analyse."""
        story.append(Paragraph("üìä D√âTAILS DE L'ANALYSE", styles['Heading2']))
        story.append(Spacer(1, 10))
        
        # Facteurs de risque
        story.append(Paragraph("<b>Facteurs identifi√©s :</b>", styles['Normal']))
        story.append(Spacer(1, 5))
        
        factors = []
        
        if customer_data.age < 30:
            factors.append("‚Ä¢ √Çge jeune (moins de 30 ans)")
        
        if customer_data.credit_score < 500:
            factors.append("‚Ä¢ Score de cr√©dit faible")
        
        if customer_data.satisfaction_score <= 2:
            factors.append("‚Ä¢ Score de satisfaction tr√®s bas")
        
        if customer_data.complain.value == "Oui":
            factors.append("‚Ä¢ Plainte r√©cente d√©pos√©e")
        
        if customer_data.num_of_products == 1:
            factors.append("‚Ä¢ Un seul produit utilis√©")
        
        if customer_data.balance < 10000:
            factors.append("‚Ä¢ Solde du compte relativement faible")
        
        if not factors:
            factors.append("‚Ä¢ Aucun facteur de risque majeur identifi√©")
        
        for factor in factors[:5]:  # Limite √† 5 facteurs
            story.append(Paragraph(factor, styles['Normal']))
    
    def _add_recommendations(self, story, result: PredictionResult, customer_data: CustomerData, styles):
        """Ajoute les recommandations."""
        story.append(Paragraph("üí° RECOMMANDATIONS", styles['Heading2']))
        story.append(Spacer(1, 10))
        
        recommendations = []
        
        if result.will_churn:
            if result.probability > 0.7:
                recommendations.append("üö® PRIORIT√â √âLEV√âE : Contact imm√©diat du client requis")
                recommendations.append("üìû Appel personnalis√© de l'√©quipe de r√©tention")
                recommendations.append("üéÅ Proposition d'offre sp√©ciale ou de remise")
            
            if customer_data.satisfaction_score <= 2:
                recommendations.append("üòü Enqu√™te de satisfaction approfondie")
                recommendations.append("üõ†Ô∏è R√©solution prioritaire des probl√®mes identifi√©s")
            
            if customer_data.num_of_products == 1:
                recommendations.append("üè¶ Proposition de produits compl√©mentaires")
                recommendations.append("üí≥ Offre de carte de cr√©dit avec avantages")
        else:
            recommendations.append("‚úÖ Client fid√®le - Maintenir la relation actuelle")
            
            if customer_data.satisfaction_score >= 4:
                recommendations.append("‚≠ê Client ambassadeur potentiel")
                recommendations.append("üó£Ô∏è Inclusion dans le programme de parrainage")
        
        if not recommendations:
            recommendations.append("‚Ä¢ Surveillance p√©riodique recommand√©e")
        
        for i, rec in enumerate(recommendations[:6], 1):  # Limite √† 6 recommandations
            story.append(Paragraph(f"{i}. {rec}", styles['Normal']))
    
    @staticmethod
    def create_download_link(pdf_bytes: bytes, filename: str) -> str:
        """
        Cr√©e un lien de t√©l√©chargement pour le PDF.
        
        Args:
            pdf_bytes: Contenu du PDF en bytes
            filename: Nom du fichier
            
        Returns:
            HTML du lien de t√©l√©chargement
        """
        b64 = base64.b64encode(pdf_bytes).decode()
        return f'<a href="data:application/pdf;base64,{b64}" download="{filename}">üì• T√©l√©charger le rapport PDF</a>'


class CSVExporter:
    """Classe pour exporter les donn√©es en CSV."""
    
    @staticmethod
    def export_prediction_data(customer_data: CustomerData, result: PredictionResult) -> str:
        """
        Exporte les donn√©es de pr√©diction en format CSV.
        
        Args:
            customer_data: Donn√©es du client
            result: R√©sultat de la pr√©diction
            
        Returns:
            Contenu CSV sous forme de string
        """
        import pandas as pd
        
        # Cr√©ation du dictionnaire de donn√©es
        data = {
            'Date_Prediction': [datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
            'Age': [customer_data.age],
            'Sexe': [customer_data.gender.value],
            'Pays': [customer_data.country.value],
            'Categorie': [customer_data.category.value],
            'Score_Credit': [customer_data.credit_score],
            'Anciennete': [customer_data.tenure],
            'Solde': [customer_data.balance],
            'Salaire_Estime': [customer_data.estimated_salary],
            'Nb_Produits': [customer_data.num_of_products],
            'Carte_Credit': [customer_data.has_credit_card.value],
            'Membre_Actif': [customer_data.is_active_member.value],
            'Plainte': [customer_data.complain.value],
            'Score_Satisfaction': [customer_data.satisfaction_score],
            'Points_Gagnes': [customer_data.point_earned],
            'Prediction_Churn': [result.prediction],
            'Probabilite_Churn': [result.probability],
            'Niveau_Risque': [result.risk_level]
        }
        
        # Cr√©ation du DataFrame et export CSV
        df = pd.DataFrame(data)
        return df.to_csv(index=False, sep=';')
